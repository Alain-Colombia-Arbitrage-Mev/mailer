/**
 * Composable unificado de Supabase para evitar conflictos
 * Usa el cliente oficial del m√≥dulo @nuxtjs/supabase
 */

export const useUnifiedSupabase = () => {
  // Usar el cliente oficial del m√≥dulo
  const supabase = useSupabaseClient()
  const user = useSupabaseUser()
  const config = useRuntimeConfig()
  
  // Verificar que la configuraci√≥n est√© correcta
  const verifyConfig = () => {
    const url = config.public.supabaseUrl
    const key = config.public.supabaseAnonKey
    
    console.log('üîç Verificando configuraci√≥n de Supabase:')
    console.log('üìç URL:', url)
    console.log('üìç Key existe:', !!key)
    console.log('üìç Key preview:', key?.substring(0, 30) + '...')
    
    if (!url || !key) {
      console.error('‚ùå Faltan variables de entorno de Supabase')
      return false
    }
    
    console.log('‚úÖ Configuraci√≥n de Supabase correcta')
    return true
  }
  
  // Test de conexi√≥n simple
  const testConnection = async () => {
    try {
      console.log('üß™ Probando conexi√≥n a Supabase...')
      
      const { data, error } = await supabase
        .from('email_templates')
        .select('id, name')
        .limit(1)

      if (error) {
        console.error('‚ùå Error de conexi√≥n:', error)
        return { success: false, error: error.message }
      }

      console.log('‚úÖ Conexi√≥n exitosa a Supabase')
      return { success: true, data }
    } catch (err: any) {
      console.error('üí• Error al probar conexi√≥n:', err)
      return { success: false, error: err.message }
    }
  }

  // M√©todos de autenticaci√≥n
  const signInWithPassword = async (email: string, password: string) => {
    try {
      console.log('üîê Intentando login con email:', email)
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      })

      if (error) {
        console.error('‚ùå Error de autenticaci√≥n:', error)
        return { success: false, error: error.message }
      }

      console.log('‚úÖ Login exitoso')
      return { success: true, data }
    } catch (err: any) {
      console.error('üí• Error en login:', err)
      return { success: false, error: err.message }
    }
  }

  const signOut = async () => {
    try {
      console.log('üö™ Cerrando sesi√≥n...')
      
      const { error } = await supabase.auth.signOut()
      
      if (error) {
        console.error('‚ùå Error al cerrar sesi√≥n:', error)
        return { success: false, error: error.message }
      }

      console.log('‚úÖ Sesi√≥n cerrada exitosamente')
      return { success: true }
    } catch (err: any) {
      console.error('üí• Error al cerrar sesi√≥n:', err)
      return { success: false, error: err.message }
    }
  }

  const getCurrentSession = async () => {
    try {
      const { data: { session }, error } = await supabase.auth.getSession()
      
      if (error) {
        console.error('‚ùå Error obteniendo sesi√≥n:', error)
        return { success: false, error: error.message, session: null }
      }

      return { success: true, session }
    } catch (err: any) {
      console.error('üí• Error obteniendo sesi√≥n:', err)
      return { success: false, error: err.message, session: null }
    }
  }

  return {
    // Cliente principal
    supabase,
    user,
    
    // Utilidades
    verifyConfig,
    testConnection,
    
    // M√©todos de autenticaci√≥n
    signInWithPassword,
    signOut,
    getCurrentSession
  }
}
